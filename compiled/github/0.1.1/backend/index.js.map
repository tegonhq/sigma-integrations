{"version":3,"file":"index.js","sources":["../../backend/constants.ts","../../backend/index.ts","../../backend/utils.ts","../../backend/account-create.ts","../../backend/schedule.ts","../../backend/sync-initial-task.ts"],"sourcesContent":["export const BACKEND_HOST = 'http://localhost:3001/v1';\n","import { integrationCreate } from './account-create';\nimport { handleSchedule } from './schedule';\nimport { syncInitialTasks } from './sync-initial-task';\n\nexport enum IntegrationPayloadEventType {\n  /**\n   * This is used to identify to which integration account the webhook belongs to\n   */\n  GET_CONNECTED_ACCOUNT_ID = 'get_connected_account_id',\n\n  /**\n   * This is used to create/delete a integration account from the\n   * user input\n   */\n  CREATE = 'create',\n  DELETE = 'delete',\n\n  // Get a fresh token for the integration\n  GET_TOKEN = 'get_token',\n\n  SCHEDULED_TASK = 'scheduled_task',\n\n  SYNC_INITIAL_TASK = 'sync_initial_task',\n}\n\nexport interface IntegrationEventPayload {\n  event: IntegrationPayloadEventType;\n  [x: string]: any;\n}\n\nexport async function run(eventPayload: IntegrationEventPayload) {\n  switch (eventPayload.event) {\n    case IntegrationPayloadEventType.CREATE:\n      return await integrationCreate(\n        eventPayload.userId,\n        eventPayload.workspaceId,\n        eventPayload.eventBody,\n      );\n\n    case IntegrationPayloadEventType.SCHEDULED_TASK:\n      return handleSchedule(eventPayload.eventBody);\n\n    case IntegrationPayloadEventType.GET_TOKEN:\n      return eventPayload.eventBody.integrationAccount.integrationConfiguration.access_token;\n\n    case IntegrationPayloadEventType.SYNC_INITIAL_TASK:\n      return syncInitialTasks(eventPayload.eventBody);\n\n    default:\n      return {\n        message: `The event payload type is ${eventPayload.event}`,\n      };\n  }\n}\n","import axios from 'axios';\n\nimport { BACKEND_HOST } from './constants';\n\nexport async function createActivity(\n  activityName: string,\n  activityType: string,\n  eventData: Record<string, any>,\n  integrationAccountId: string,\n) {\n  return await axios.post(`${BACKEND_HOST}/activity`, {\n    type: activityType,\n    eventData,\n    name: activityName,\n    integrationAccountId,\n  });\n}\n\nexport async function createActivities(activities: any, workspaceId: string) {\n  const batchSize = 10; // Increased batch size for better efficiency\n  const results = [];\n  const batches = [];\n\n  // Split activities into batches first\n  for (let i = 0; i < activities.length; i += batchSize) {\n    batches.push(activities.slice(i, i + batchSize));\n  }\n\n  // Process all batches concurrently with Promise.all\n  try {\n    const responses = await Promise.all(\n      batches.map((batch, index) =>\n        axios\n          .post(`${BACKEND_HOST}/activity/bulk?workspaceId=${workspaceId}`, batch)\n          .catch((error) => {\n            console.error(`Error processing batch ${index + 1}:`, error);\n            return { data: [] }; // Return empty data on error to continue processing\n          }),\n      ),\n    );\n\n    // Combine all results\n    results.push(...responses.flatMap((response) => response.data));\n  } catch (error) {\n    console.error('Fatal error processing batches');\n    // throw error; // Throw fatal errors\n  }\n\n  return results;\n}\n\nexport async function createTask(\n  url: string,\n  title: string,\n  status: string,\n  sourceId: string,\n  integrationAccountId: string,\n) {\n  return await axios.post(`${BACKEND_HOST}/tasks`, {\n    url,\n    title,\n    status,\n    sourceId,\n    integrationAccountId,\n  });\n}\n\nexport async function createTasks(tasks: any, workspaceId: string) {\n  const batchSize = 10;\n  const results = [];\n  const batches = [];\n\n  // Split tasks into batches first\n  for (let i = 0; i < tasks.length; i += batchSize) {\n    batches.push(tasks.slice(i, i + batchSize));\n  }\n\n  // Process all batches concurrently with Promise.all\n  try {\n    const responses = await Promise.all(\n      batches.map((batch, index) =>\n        axios\n          .post(`${BACKEND_HOST}/tasks/bulk?workspaceId=${workspaceId}`, batch)\n          .catch((error) => {\n            console.error(`Error processing batch ${index + 1}:`, error);\n            return { data: [] }; // Return empty data on error to continue processing\n          }),\n      ),\n    );\n\n    // Combine all results\n    results.push(...responses.flatMap((response) => response.data));\n  } catch (error) {\n    console.error('Fatal error processing batches');\n    // throw error; // Throw fatal errors\n  }\n\n  return results;\n}\n\nexport async function getGithubData(url: string, accessToken: string) {\n  return (\n    await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        Accept: 'application/vnd.github+json',\n        'X-GitHub-Api-Version': '2022-11-28',\n      },\n    })\n  ).data;\n}\n","import axios from 'axios';\n\nimport { BACKEND_HOST } from './constants';\nimport { getGithubData } from './utils';\n\nexport async function integrationCreate(\n  userId: string,\n  workspaceId: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any,\n) {\n  const { oauthResponse, integrationDefinition } = data;\n  const integrationConfiguration = {\n    refresh_token: oauthResponse.refresh_token,\n    access_token: oauthResponse.access_token,\n  };\n\n  const user = await getGithubData(\n    'https://api.github.com/user',\n    integrationConfiguration.access_token,\n  );\n  const allRepos = await getGithubData(\n    'https://api.github.com/user/repos',\n    integrationConfiguration.access_token,\n  );\n\n  const repositories = allRepos.map((repo: any) => ({\n    id: repo.id.toString(),\n    name: repo.name,\n    private: repo.private,\n    fullName: repo.full_name,\n  }));\n\n  const payload = {\n    settings: {\n      login: user.login,\n      scheduled: true,\n      schedule_frequency: '*/5 * * * *',\n      repositories,\n    },\n    userId,\n    accountId: user.id.toString(),\n    config: integrationConfiguration,\n    workspaceId,\n    integrationDefinitionId: integrationDefinition.id,\n  };\n  return (await axios.post(`${BACKEND_HOST}/integration_account`, payload)).data;\n}\n","import axios from 'axios';\n\nimport { BACKEND_HOST } from './constants';\nimport { createActivities, createTasks, getGithubData } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function handleSchedule(eventBody: any) {\n  const { integrationAccount } = eventBody;\n  const integrationConfiguration = integrationAccount.integrationConfiguration;\n  const settings = integrationAccount.settings;\n\n  if (!settings?.lastSyncTime) {\n    return {\n      message: `No last sync time in settings of integration account ${integrationAccount.id}`,\n    };\n  }\n\n  const lastSyncTime = settings.lastSyncTime;\n\n  const allowedReasons = [\n    'assign',\n    'review_requested',\n    'mention',\n    'state_change',\n    'subscribed',\n    'author',\n  ];\n\n  let page = 1;\n  let hasMorePages = true;\n  let notificationCount = 0;\n\n  while (hasMorePages) {\n    const notifications = await getGithubData(\n      `https://api.github.com/notifications?page=${page}&per_page=50&all=true&since=${lastSyncTime}`,\n      integrationConfiguration.access_token,\n    );\n\n    // Check if notifications exists and has data\n    if (notifications.length === 0) {\n      hasMorePages = false;\n      break;\n    }\n    page++;\n\n    const filteredNotifications = notifications.filter((notification: any) =>\n      allowedReasons.includes(notification.reason),\n    );\n\n    notificationCount += filteredNotifications?.length || 0;\n\n    const tasks: any = [];\n    const activities: any = [];\n\n    await Promise.all(\n      filteredNotifications.map(async (notification: any) => {\n        const { reason, subject } = notification;\n\n        let url: string = '';\n        let activityType: string = '';\n        let activityName: string = '';\n        let hasTask: boolean = false;\n        let sourceId: string = '';\n        let status = 'Todo';\n        let title: string = '';\n        let subjectType: string = '';\n        let githubData: Record<string, any> = {};\n        switch (reason) {\n          case 'mention':\n            url = subject.latest_comment_url;\n            subjectType = subject.type.toLowerCase();\n            activityType = `github_${subjectType}_comment_mention`;\n            activityName = `${subjectType} mention: ${subject.title}`;\n            hasTask = false;\n            githubData = await getGithubData(url, integrationConfiguration.access_token);\n            break;\n\n          case 'assign':\n            url = subject.url;\n            subjectType = subject.type.toLowerCase();\n            activityType = `github_${subjectType}_assigned`;\n            activityName = `${subjectType} Assign: ${subject.title}`;\n            hasTask = true;\n            githubData = await getGithubData(url, integrationConfiguration.access_token);\n            sourceId = githubData.id.toString();\n            status = githubData.state === 'open' ? 'Todo' : 'Done';\n            title = `#${githubData.number} - ${githubData.title}`;\n            break;\n\n          case 'review_requested':\n            url = subject.url;\n            subjectType = subject.type.toLowerCase();\n            activityType = `github_${subjectType}_review_requested`;\n            activityName = `${subjectType} Review Requested: ${subject.title}`;\n            hasTask = true;\n            githubData = await getGithubData(url, integrationConfiguration.access_token);\n            sourceId = githubData.id.toString();\n            status = eventBody.merged ? 'Todo' : 'Done';\n            title = `#${githubData.number} - ${githubData.title}`;\n            break;\n\n          case 'state_change':\n            url = subject.url;\n            subjectType = subject.type.toLowerCase();\n            activityType = `github_${subjectType}_state_change`;\n            activityName = `${subjectType} State Changed: ${subject.title}`;\n            hasTask = true;\n            githubData = await getGithubData(url, integrationConfiguration.access_token);\n            sourceId = githubData.id.toString();\n            status =\n              subjectType === 'issue'\n                ? githubData.state === 'open'\n                  ? 'Todo'\n                  : 'Done'\n                : eventBody.merged\n                  ? 'Todo'\n                  : 'Done';\n            title = `#${githubData.number} - ${githubData.title}`;\n            break;\n\n          case 'subscribed':\n            url = subject.url;\n            subjectType = subject.type.toLowerCase();\n            activityType = `github_${subjectType}`;\n            activityName = `${subjectType}: ${subject.title}`;\n            hasTask = true;\n            githubData = await getGithubData(url, integrationConfiguration.access_token);\n            sourceId = githubData.id.toString();\n            status =\n              subjectType === 'issue'\n                ? githubData.state === 'open'\n                  ? 'Todo'\n                  : 'Done'\n                : eventBody.merged\n                  ? 'Todo'\n                  : 'Done';\n            title = `#${githubData.number} - ${githubData.title}`;\n            break;\n\n          case 'author':\n            url = subject.url;\n            subjectType = subject.type.toLowerCase();\n            activityType = `github_${subjectType}`;\n            activityName = `${subjectType}: ${subject.title}`;\n            hasTask = true;\n            githubData = await getGithubData(url, integrationConfiguration.access_token);\n            sourceId = githubData.id.toString();\n            status = eventBody.merged ? 'Todo' : 'Done';\n            title = `#${githubData.number} - ${githubData.title}`;\n            break;\n\n          default:\n            break;\n        }\n\n        if (url) {\n          if (hasTask) {\n            tasks.push({\n              url,\n              title,\n              status,\n              sourceId,\n              integrationAccountId: integrationAccount.id,\n            });\n          }\n          activities.push({\n            type: activityType,\n            eventData: notification,\n            name: activityName,\n            integrationAccountId: integrationAccount.id,\n          });\n        }\n      }),\n    );\n\n    if (activities.length > 0) {\n      await createActivities(activities, integrationAccount.workspaceId);\n    }\n    if (tasks.length > 0) {\n      await createTasks(tasks, integrationAccount.workspaceId);\n    }\n\n    await axios.post(`${BACKEND_HOST}/integration_account/${integrationAccount.id}`, {\n      settings: { ...settings, lastSyncTime: new Date().toISOString() },\n    });\n  }\n\n  return { message: `Processed ${notificationCount} notifications from github` };\n}\n","import axios from 'axios';\n\nimport { BACKEND_HOST } from './constants';\nimport { createActivities, createTasks, getGithubData } from './utils';\n\nexport async function syncInitialTasks(eventBody: any) {\n  const { integrationAccount } = eventBody;\n  const integrationConfiguration = integrationAccount.integrationConfiguration;\n  const settings = integrationAccount.settings;\n\n  const queries = [\n    `assignee:${settings.login}+type:issue+is:open`,\n    `review-requested:${settings.login}+type:pr+is:open`,\n    `author:${settings.login}+type:pr+is:open`,\n  ];\n\n  const tasks: any = [];\n  const activities: any = [];\n\n  await Promise.all(\n    queries.map(async (query: string) => {\n      let page = 1;\n      let hasMorePages = true;\n      while (hasMorePages) {\n        const data = await getGithubData(\n          `https://api.github.com/search/issues?page=${page}&per_page=50&q=${query}`,\n          integrationConfiguration.access_token,\n        );\n\n        // Check if notifications exists and has data\n        if (data.items?.length === 0) {\n          hasMorePages = false;\n          break;\n        }\n\n        data.items.map((item: any) => {\n          const url = item.url;\n          const subject = {\n            type: item.node_id.includes('PR') ? 'issue' : 'pullrequest',\n          };\n          const subjectType = subject.type.toLowerCase();\n          const activityType = `github_${subjectType}`;\n          const activityName = `${subjectType}: ${item.title}`;\n          const sourceId = item.id.toString();\n          const status = item.state === 'open' ? 'Todo' : 'Done';\n          const title = `#${item.number} - ${item.title}`;\n\n          tasks.push({\n            url,\n            title,\n            status,\n            sourceId,\n            integrationAccountId: integrationAccount.id,\n          });\n          activities.push({\n            type: activityType,\n            eventData: {\n              id: item.id,\n              url: item.url,\n              comment_url: item.comment_url,\n              html_url: item.html_url,\n              number: item.number,\n              title: item.title,\n              state: item.state,\n            },\n            name: activityName,\n            integrationAccountId: integrationAccount.id,\n          });\n\n          return true;\n        });\n        page++;\n      }\n    }),\n  );\n\n  if (activities.length > 0) {\n    await createActivities(activities, integrationAccount.workspaceId);\n  }\n  if (tasks.length > 0) {\n    await createTasks(tasks, integrationAccount.workspaceId);\n  }\n\n  await axios.post(`${BACKEND_HOST}/integration_account/${integrationAccount.id}`, {\n    settings: { ...settings, lastSyncTime: new Date().toISOString() },\n  });\n}\n"],"names":["IntegrationPayloadEventType","BACKEND_HOST","createActivities","activities","workspaceId","results","batches","i","length","push","slice","Promise","all","map","batch","index","axios","post","concat","catch","error","console","data","responses","_a","sent","apply","flatMap","response","createTasks","tasks","getGithubData","url","accessToken","get","headers","Authorization","Accept","integrationCreate","userId","oauthResponse","integrationDefinition","integrationConfiguration","refresh_token","access_token","user","allRepos","repositories","repo","id","toString","name","private","fullName","full_name","payload","settings","login","scheduled","schedule_frequency","accountId","config","integrationDefinitionId","handleSchedule","eventBody","integrationAccount","lastSyncTime","message","allowedReasons","page","hasMorePages","notificationCount","notifications","_b","filteredNotifications","filter","notification","includes","reason","__awaiter","_this","subject","activityType","activityName","hasTask","sourceId","status","title","subjectType","githubData","latest_comment_url","type","toLowerCase","state","number","merged","integrationAccountId","eventData","__assign","Date","toISOString","syncInitialTasks","queries","query","items","item","node_id","comment_url","html_url","eventPayload","event","CREATE","SCHEDULED_TASK","GET_TOKEN","SYNC_INITIAL_TASK"],"mappings":"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"}